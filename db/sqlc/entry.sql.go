// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :execlastid
INSERT INTO entries
(account_id, amount) VALUES (?, ?)
`

type CreateEntryParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Amount    int32 `db:"amount" json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createEntry, arg.AccountID, arg.Amount)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getEntryById = `-- name: GetEntryById :one
select id, account_id, amount, created_at from entries where id = ?
`

func (q *Queries) GetEntryById(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryById, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
