// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :execlastid
INSERT INTO accounts (
  owner, balance, currency
) VALUES (
  ?, ?, ?
)
`

type CreateAccountParams struct {
	Owner    string `db:"owner" json:"owner"`
	Balance  int32  `db:"balance" json:"balance"`
	Currency string `db:"currency" json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteAccountById = `-- name: DeleteAccountById :exec
DELETE FROM accounts WHERE id = ?
`

func (q *Queries) DeleteAccountById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountById, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, owner, balance, currency, created_at FROM accounts WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, owner, balance, currency, created_at FROM accounts ORDER BY id DESC LIMIT ? OFFSET ?
`

type GetAccountsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAccounts(ctx context.Context, arg GetAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts
  SET balance = balance + ?
  WHERE id = ?
`

type UpdateAccountBalanceParams struct {
	Amount int32 `db:"amount" json:"amount"`
	ID     int64 `db:"id" json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountBalance, arg.Amount, arg.ID)
	return err
}

const updateAccountById = `-- name: UpdateAccountById :exec
UPDATE accounts
  SET balance = ?
  WHERE id = ?
`

type UpdateAccountByIdParams struct {
	Balance int32 `db:"balance" json:"balance"`
	ID      int64 `db:"id" json:"id"`
}

func (q *Queries) UpdateAccountById(ctx context.Context, arg UpdateAccountByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountById, arg.Balance, arg.ID)
	return err
}
