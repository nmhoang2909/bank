// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :execlastid
insert into users (username, full_name, email, hash_password) values (?, ?, ?, ?)
`

type CreateUserParams struct {
	Username     string `db:"username" json:"username"`
	FullName     string `db:"full_name" json:"full_name"`
	Email        string `db:"email" json:"email"`
	HashPassword string `db:"hash_password" json:"hash_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HashPassword,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getUser = `-- name: GetUser :one
select username, full_name, email, hash_password, password_changed_at, created_at from users where username = ?
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
