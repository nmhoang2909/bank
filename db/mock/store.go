// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nmhoang2909/bank/db/sqlc (interfaces: IStore)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination ./../mock/store.go github.com/nmhoang2909/bank/db/sqlc IStore
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/nmhoang2909/bank/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockIStore is a mock of IStore interface.
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
}

// MockIStoreMockRecorder is the mock recorder for MockIStore.
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance.
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockIStore) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockIStoreMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockIStore)(nil).CreateAccount), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockIStore) CreateEntry(arg0 context.Context, arg1 db.CreateEntryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockIStoreMockRecorder) CreateEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockIStore)(nil).CreateEntry), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockIStore) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockIStoreMockRecorder) CreateTransfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockIStore)(nil).CreateTransfer), arg0, arg1)
}

// DeleteAccountById mocks base method.
func (m *MockIStore) DeleteAccountById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountById indicates an expected call of DeleteAccountById.
func (mr *MockIStoreMockRecorder) DeleteAccountById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountById", reflect.TypeOf((*MockIStore)(nil).DeleteAccountById), arg0, arg1)
}

// DeleteAccountTx mocks base method.
func (m *MockIStore) DeleteAccountTx(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountTx indicates an expected call of DeleteAccountTx.
func (mr *MockIStoreMockRecorder) DeleteAccountTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountTx", reflect.TypeOf((*MockIStore)(nil).DeleteAccountTx), arg0, arg1)
}

// DeleteEntryByAccountId mocks base method.
func (m *MockIStore) DeleteEntryByAccountId(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryByAccountId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntryByAccountId indicates an expected call of DeleteEntryByAccountId.
func (mr *MockIStoreMockRecorder) DeleteEntryByAccountId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryByAccountId", reflect.TypeOf((*MockIStore)(nil).DeleteEntryByAccountId), arg0, arg1)
}

// DeleteTransferByFromAccontId mocks base method.
func (m *MockIStore) DeleteTransferByFromAccontId(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferByFromAccontId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransferByFromAccontId indicates an expected call of DeleteTransferByFromAccontId.
func (mr *MockIStoreMockRecorder) DeleteTransferByFromAccontId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferByFromAccontId", reflect.TypeOf((*MockIStore)(nil).DeleteTransferByFromAccontId), arg0, arg1)
}

// DeleteTransferByToAccontId mocks base method.
func (m *MockIStore) DeleteTransferByToAccontId(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferByToAccontId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransferByToAccontId indicates an expected call of DeleteTransferByToAccontId.
func (mr *MockIStoreMockRecorder) DeleteTransferByToAccontId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferByToAccontId", reflect.TypeOf((*MockIStore)(nil).DeleteTransferByToAccontId), arg0, arg1)
}

// GetAccountById mocks base method.
func (m *MockIStore) GetAccountById(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockIStoreMockRecorder) GetAccountById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockIStore)(nil).GetAccountById), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockIStore) GetAccounts(arg0 context.Context, arg1 db.GetAccountsParams) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockIStoreMockRecorder) GetAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockIStore)(nil).GetAccounts), arg0, arg1)
}

// GetEntryById mocks base method.
func (m *MockIStore) GetEntryById(arg0 context.Context, arg1 int64) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryById", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryById indicates an expected call of GetEntryById.
func (mr *MockIStoreMockRecorder) GetEntryById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryById", reflect.TypeOf((*MockIStore)(nil).GetEntryById), arg0, arg1)
}

// GetTransferById mocks base method.
func (m *MockIStore) GetTransferById(arg0 context.Context, arg1 int64) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferById", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferById indicates an expected call of GetTransferById.
func (mr *MockIStoreMockRecorder) GetTransferById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferById", reflect.TypeOf((*MockIStore)(nil).GetTransferById), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockIStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockIStoreMockRecorder) TransferTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockIStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockIStore) UpdateAccountBalance(arg0 context.Context, arg1 db.UpdateAccountBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockIStoreMockRecorder) UpdateAccountBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockIStore)(nil).UpdateAccountBalance), arg0, arg1)
}

// UpdateAccountById mocks base method.
func (m *MockIStore) UpdateAccountById(arg0 context.Context, arg1 db.UpdateAccountByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountById indicates an expected call of UpdateAccountById.
func (mr *MockIStoreMockRecorder) UpdateAccountById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountById", reflect.TypeOf((*MockIStore)(nil).UpdateAccountById), arg0, arg1)
}
